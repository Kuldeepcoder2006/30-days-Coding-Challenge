You are given a 0-indexed 2D integer matrix grid of size n * n with values in the range [1, n2]. Each integer appears exactly once except a which appears twice and b which is missing. The task is to find the repeating and missing numbers a and b.

Return a 0-indexed integer array ans of size 2 where ans[0] equals to a and ans[1] equals to b.

Solution = 


include <iostream>
#include <vector>
#include <unordered_map>

std::vector<int> findRepeatingAndMissing(const std::vector<std::vector<int>>& grid) {
    int n = grid.size();
    int n2 = n * n;
    std::unordered_map<int, int> count;
    
    // Flatten the grid and count occurrences
    for (const auto& row : grid) {
        for (int num : row) {
            count[num]++;
        }
    }
    
    int repeating = -1, missing = -1;
    
    // Check for the repeating and missing numbers in range [1, n^2]
    for (int num = 1; num <= n2; ++num) {
        if (count[num] == 2) {
            repeating = num;
        } else if (count[num] == 0) {
            missing = num;
        }
    }
    
    return {repeating, missing};
}

int main() {
    int n;
    std::cout << "Enter the size of the grid (n): ";
    std::cin >> n;

    std::vector<std::vector<int>> grid(n, std::vector<int>(n));
    std::cout << "Enter the elements of the grid row by row:" << std::endl;

    // Input grid elements
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            std::cin >> grid[i][j];
        }
    }

    // Find the repeating and missing numbers
    std::vector<int> result = findRepeatingAndMissing(grid);
    std::cout << "Output: [" << result[0] << ", " << result[1] << "]" << std::endl;

    return 0;
